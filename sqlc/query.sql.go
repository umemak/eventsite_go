// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :execresult
INSERT INTO events (title, start, place, open, close, author) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateEventParams struct {
	Title  string
	Start  time.Time
	Place  string
	Open   time.Time
	Close  time.Time
	Author int64
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEvent,
		arg.Title,
		arg.Start,
		arg.Place,
		arg.Open,
		arg.Close,
		arg.Author,
	)
}

const createEventUser = `-- name: CreateEventUser :execresult
INSERT INTO events_users (event_id, user_id, cancelled) VALUES (?, ?, ?)
`

type CreateEventUserParams struct {
	EventID   int64
	UserID    int64
	Cancelled bool
}

func (q *Queries) CreateEventUser(ctx context.Context, arg CreateEventUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEventUser, arg.EventID, arg.UserID, arg.Cancelled)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (uid, name) VALUES (?, ?)
`

type CreateUserParams struct {
	Uid  string
	Name string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Uid, arg.Name)
}

const getEvent = `-- name: GetEvent :one
SELECT id, title, start, place, open, close, author FROM events WHERE id = ? LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Start,
		&i.Place,
		&i.Open,
		&i.Close,
		&i.Author,
	)
	return i, err
}

const getUserByUID = `-- name: GetUserByUID :one
SELECT id, uid, name FROM users WHERE uid = ? LIMIT 1
`

func (q *Queries) GetUserByUID(ctx context.Context, uid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUID, uid)
	var i User
	err := row.Scan(&i.ID, &i.Uid, &i.Name)
	return i, err
}

const listEventUsers = `-- name: ListEventUsers :many
SELECT eu.id, eu.event_id, eu.user_id, eu.cancelled, u.name
FROM (
    SELECT id, event_id, user_id, cancelled,
    row_number() OVER (PARTITION BY event_id, user_id ORDER BY id DESC) AS num
    FROM events_users
) eu, users u
WHERE eu.event_id = ?
  AND eu.num = 1
  AND eu.user_id = u.id
ORDER BY eu.id
`

type ListEventUsersRow struct {
	ID        int64
	EventID   int64
	UserID    int64
	Cancelled bool
	Name      string
}

func (q *Queries) ListEventUsers(ctx context.Context, eventID int64) ([]ListEventUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listEventUsers, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEventUsersRow
	for rows.Next() {
		var i ListEventUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.UserID,
			&i.Cancelled,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvents = `-- name: ListEvents :many
SELECT id, title, start, place, open, close, author FROM events ORDER BY id
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Start,
			&i.Place,
			&i.Open,
			&i.Close,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, uid, name FROM users ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Uid, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

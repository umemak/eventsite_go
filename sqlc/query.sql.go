// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :execresult
INSERT INTO event (title, start, place, open, close, author) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateEventParams struct {
	Title  string
	Start  time.Time
	Place  string
	Open   time.Time
	Close  time.Time
	Author int64
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEvent,
		arg.Title,
		arg.Start,
		arg.Place,
		arg.Open,
		arg.Close,
		arg.Author,
	)
}

const getEvent = `-- name: GetEvent :one
SELECT id, title, start, place, open, close, author FROM event WHERE id = ? LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Start,
		&i.Place,
		&i.Open,
		&i.Close,
		&i.Author,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, uid, name FROM user
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Uid, &i.Name)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, title, start, place, open, close, author FROM event ORDER BY id
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Start,
			&i.Place,
			&i.Open,
			&i.Close,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

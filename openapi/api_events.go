/*
 * eventsite
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// EventsApiController binds http requests to an api service and writes the service results to the http response
type EventsApiController struct {
	service      EventsApiServicer
	errorHandler ErrorHandler
}

// EventsApiOption for how the controller is set up.
type EventsApiOption func(*EventsApiController)

// WithEventsApiErrorHandler inject ErrorHandler into controller
func WithEventsApiErrorHandler(h ErrorHandler) EventsApiOption {
	return func(c *EventsApiController) {
		c.errorHandler = h
	}
}

// NewEventsApiController creates a default api controller
func NewEventsApiController(s EventsApiServicer, opts ...EventsApiOption) Router {
	controller := &EventsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the EventsApiController
func (c *EventsApiController) Routes() Routes {
	return Routes{
		{
			"EventsGet",
			strings.ToUpper("Get"),
			"/v1/events",
			c.EventsGet,
		},
		{
			"EventsPost",
			strings.ToUpper("Post"),
			"/v1/events",
			c.EventsPost,
		},
	}
}

// EventsGet - Get all events.
func (c *EventsApiController) EventsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.EventsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EventsPost - Create event.
func (c *EventsApiController) EventsPost(w http.ResponseWriter, r *http.Request) {
	eventParam := Event{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&eventParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertEventRequired(eventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EventsPost(r.Context(), eventParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
